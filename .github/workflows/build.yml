name: Build

on:
  push:
    branches:
      - master
    paths:
      - 'package.json'  # D√©clenche uniquement si package.json est modifi√©

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.VERSION_CHANGED }}  # Export pour les autres jobs
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Permet de comparer avec le commit pr√©c√©dent

      - name: Check version change
        id: check_version
        run: |
          PREV_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
          CURR_VERSION=$(jq -r '.version' package.json)

          echo "Ancienne version: $PREV_VERSION"
          echo "Nouvelle version: $CURR_VERSION"

          if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
            echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  release:
    needs: check_version
    if: needs.check_version.outputs.version_changed == 'true'  # V√©rifie l'output du job pr√©c√©dent
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install Dependencies
        run: npm ci
        shell: bash

      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            dist/latest*.yml
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.AppImage
            dist/*.AppImage.blockmap

  release_version:
    needs: release
    if: needs.release.result == 'success'  # Se lance seulement si le build a r√©ussi
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour push des tags

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: build-*
          merge-multiple: true

      - name: Get version
        id: get_version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
        shell: bash

      - name: Get previous tag
        id: get_previous_tag
        run: echo "PREV_TAG=$(git describe --tags --abbrev=0 --always || echo '')" >> $GITHUB_ENV
        shell: bash

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          VERSION: ${{ env.VERSION }}

      - name: Generate changelog
        id: generate_changelog
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          
          if [ -z "$PREV_TAG" ]; then
            echo "üéâ Premi√®re release !" >> changelog.txt
          else
            echo "### üìú Changements depuis la derni√®re version :" >> changelog.txt
            echo "" >> changelog.txt
            echo "G√©n√©ration du changelog depuis $PREV_TAG..."
            git log "$PREV_TAG"..HEAD --pretty=format:"- %s (%h)" >> changelog.txt
          fi

          echo "Changelog g√©n√©r√© :"
          cat changelog.txt
        shell: bash

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Mise √† jour ${{ env.VERSION }}
          body_path: changelog.txt  # Utilisation du fichier changelog.txt comme body
          files: |
            dist/latest*.yml
            dist/*.exe
            dist/*.exe.blockmap
            dist/*.dmg
            dist/*.dmg.blockmap
            dist/*.AppImage
            dist/*.AppImage.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
