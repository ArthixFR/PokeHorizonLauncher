name: Build

on:
  push:
    branches:
      - master
    paths:
      - 'package.json'  # DÃ©clenche uniquement si package.json est modifiÃ©

jobs:
  release:
    runs-on: ${{ matrix.os }}
    if: env.VERSION_CHANGED == 'true'  # ExÃ©cuter seulement si la version change

    permissions:
      contents: write

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Permet de comparer avec le commit prÃ©cÃ©dent

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Check version change
        id: check_version
        run: |
          PREV_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
          CURR_VERSION=$(jq -r '.version' package.json)
          
          echo "Ancienne version: $PREV_VERSION"
          echo "Nouvelle version: $CURR_VERSION"
          
          if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install Dependencies
        run: npm ci
        shell: bash

      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist
        shell: bash
  release_version:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.result == 'success'  # ExÃ©cuter seulement si le build a rÃ©ussi

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # NÃ©cessaire pour push des tags

      - name: Get version
        id: get_version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
        shell: bash

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"
        env:
          VERSION: ${{ env.VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: "ðŸš€ Nouvelle version v${{ env.VERSION }} publiÃ©e automatiquement."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
